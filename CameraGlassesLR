// use "ffmpeg -framerate 12 -i pic_%04d.jpg -c:v libx264 -pix_fmt yuv420p output.mp4" in the command line to combine everything

#include "esp_camera.h"
#include "FS.h"
#include "SD_MMC.h"

// ESP32-S3 Sense OV5640 Camera Pinout
#define PWDN_GPIO_NUM     -1
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM     10
#define SIOD_GPIO_NUM     40
#define SIOC_GPIO_NUM     39

#define Y9_GPIO_NUM       48
#define Y8_GPIO_NUM       11
#define Y7_GPIO_NUM       12
#define Y6_GPIO_NUM       14
#define Y5_GPIO_NUM       16
#define Y4_GPIO_NUM       18
#define Y3_GPIO_NUM       17
#define Y2_GPIO_NUM       15
#define VSYNC_GPIO_NUM    38
#define HREF_GPIO_NUM     47
#define PCLK_GPIO_NUM     13

int frameCount = 0;
const int totalFrames = 300; // Stop after 300 frames
const int delayBetweenFrames = 80; // ~12.5 FPS

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Initializing camera...");

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer   = LEDC_TIMER_0;
  config.pin_d0       = Y2_GPIO_NUM;
  config.pin_d1       = Y3_GPIO_NUM;
  config.pin_d2       = Y4_GPIO_NUM;
  config.pin_d3       = Y5_GPIO_NUM;
  config.pin_d4       = Y6_GPIO_NUM;
  config.pin_d5       = Y7_GPIO_NUM;
  config.pin_d6       = Y8_GPIO_NUM;
  config.pin_d7       = Y9_GPIO_NUM;
  config.pin_xclk     = XCLK_GPIO_NUM;
  config.pin_pclk     = PCLK_GPIO_NUM;
  config.pin_vsync    = VSYNC_GPIO_NUM;
  config.pin_href     = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn     = PWDN_GPIO_NUM;
  config.pin_reset    = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;

  config.frame_size    = FRAMESIZE_SVGA;  // 800x600
  config.jpeg_quality  = 10;              // Lower = higher quality
  config.fb_count      = 2;               // Double buffering

  // Init camera
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed: 0x%x\n", err);
    while (true);
  }

  Serial.println("Initializing SD card...");
  if (!SD_MMC.begin("/sdcard", true)) { // 1-bit mode is more stable
    Serial.println("SD card mount failed");
    while (true);
  }

  uint8_t cardType = SD_MMC.cardType();
  if (cardType == CARD_NONE) {
    Serial.println("No SD card detected");
    while (true);
  }

  Serial.println("Camera and SD initialized.");
}

void loop() {
  if (frameCount >= totalFrames) return;

  unsigned long t0 = millis();
  camera_fb_t *fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    return;
  }

  char filename[32];
  sprintf(filename, "/pic_%04d.jpg", frameCount++);
  File file = SD_MMC.open(filename, FILE_WRITE);
  if (!file) {
    Serial.printf("Failed to open %s for writing\n", filename);
    esp_camera_fb_return(fb);
    return;
  }

  file.write(fb->buf, fb->len);
  file.close();
  esp_camera_fb_return(fb);

  Serial.printf("Saved %s (%d bytes)\n", filename, fb->len);
  delay(delayBetweenFrames); // ~12 FPS
}
